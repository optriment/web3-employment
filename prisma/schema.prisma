generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                   String   @map("user_id") @db.Uuid
  type                     String
  provider                 String
  providerAccountId        String   @map("provider_account_id")
  refresh_token            String?  @db.Text
  access_token             String?  @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?  @db.Text
  session_state            String?
  // NOTE: This field is required to use GitHub Provider
  refresh_token_expires_in Int?
  createdAt                DateTime @default(now()) @map(name: "created_at")
  updatedAt                DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.Uuid
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  accounts      Account[]
  Session       Session[]
  Group         Group[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Group {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  displayName String      @map(name: "display_name")
  comment     String?
  userId      String      @map(name: "user_id") @db.Uuid
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipients  Recipient[]
  createdAt   DateTime    @default(now()) @map(name: "created_at")
  updatedAt   DateTime    @updatedAt @map(name: "updated_at")
  archivedAt  DateTime?   @map(name: "archived_at")

  @@map("groups")
}

model Recipient {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  displayName   String    @map(name: "display_name")
  comment       String?
  contacts      String?
  walletAddress String?   @map(name: "wallet_address")
  salary        Int?      @default(0)
  group         Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId       String    @map(name: "group_id") @db.Uuid
  payments      Payment[]
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  archivedAt    DateTime? @map(name: "archived_at")

  @@map("recipients")
}

model Payment {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  transactionHash String    @unique @map(name: "transaction_hash")
  amount          Int
  walletAddress   String    @map(name: "wallet_address")
  recipient       Recipient @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  recipientId     String    @map(name: "recipient_id") @db.Uuid
  createdAt       DateTime  @default(now()) @map(name: "created_at")

  @@map("payments")
}
